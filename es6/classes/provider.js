import { bundleStore, providerStore } from '../writers';
import Module from './module';
import { Inject } from '../decorators/inject';
import { getInjectableNameWithJitCreation } from '../util/get-injectable-name';
import { Providers } from '../decorators/providers';
import { INJECTABLE } from '../decorators/injectable';
const TYPE = 'provider';
export class Provider {
    constructor(token, { useClass, useValue, useConstant, useFactory, deps }) {
        this.isProvider = true;
        this._dependencies = [];
        try {
            this.token = getInjectableNameWithJitCreation(token);
        }
        catch (e) {
            throw new Error(`new Provider() Error: Invalid token ${token}`);
        }
        Object.assign(this, { useClass, useValue, useConstant, useFactory });
        if (!useClass && !useValue && !useConstant && !useFactory) {
            throw new Error(`new Provider(${token}) Error: No usage provided (i.e. useClass, useValue, useConstant, useFactory)`);
        }
        if (deps) {
            Inject(...deps)(this.useFactory);
            Providers(...deps.filter(d => typeof d !== 'string'))(this.useFactory, `while analyzing Provider '${this.token}' useFactory deps`);
            this._dependencies = bundleStore.get('$inject', this.useFactory);
        }
        providerStore.set('name', this.token, this);
        providerStore.set('type', TYPE, this);
    }
    get type() {
        if (this._type)
            return this._type;
        this._type = Object.keys(this).find((k) => k.startsWith('use') && this[k] !== undefined);
        return this._type;
    }
    get dependencies() {
        return this._dependencies;
    }
}
Module.addProvider(TYPE, (provider, name, injects, ngModule) => {
    switch (provider.type) {
        case 'useValue':
            ngModule.value(provider.token, provider.useValue);
            break;
        case 'useConstant':
            ngModule.constant(provider.token, provider.useConstant);
            break;
        case 'useClass':
            injects = bundleStore.get('$inject', provider.useClass) || [];
            Module.getParser(INJECTABLE)(provider.useClass, provider.token, injects, ngModule);
            break;
        case 'useFactory':
            ngModule.factory(provider.token, [...provider.dependencies, provider.useFactory]);
            break;
        default:
            break;
    }
});
export const provide = (token, { useClass, useValue, useConstant, useFactory, deps }) => {
    return new Provider(token, { useClass, useValue, useConstant, useFactory, deps });
};

//# sourceMappingURL=data:application/json;base64,
