import { bundleStore } from '../writers';
import { getInjectableName } from './get-injectable-name';
export class By {
    static all() {
        return '*';
    }
    static css(selector) {
        return selector;
    }
    static directive(type) {
        return bundleStore.get('selector', type);
    }
}
(function extendJQLite(proto) {
    Object.defineProperties(proto, {
        nativeElement: {
            get() {
                return this[0];
            }
        },
        componentInstance: {
            get() {
                if (this._componentInstance)
                    return this._componentInstance;
                let isolateScope = this.isolateScope();
                this._componentInstance = isolateScope && isolateScope['ctrl'] || null;
                return this._componentInstance;
            }
        },
        componentViewChildren: {
            get() {
                return [...this.children()].map(child => angular.element(child));
            }
        },
        getLocal: {
            value: function (injectable) {
                return (this.injector() || this.inheritedData('$injector'))
                    .get(getInjectableName(injectable));
            }
        },
        query: {
            value: function (predicate, scope) {
                let results = this.queryAll(predicate, scope);
                return results.length > 0 ? results[0] : null;
            }
        },
        queryAll: {
            value: function (predicate, scope) {
                if (scope)
                    throw Error('scope argument not yet supported. All queries are done with Scope.all for now.');
                return Array
                    .from(this[0].querySelectorAll(predicate))
                    .map(el => angular.element(el));
            }
        },
        getDirectiveInstance: {
            value: function (index) {
                throw new Error('Not yet implemented in ng-forward.');
            }
        },
        triggerEventHandler: {
            value: function (eventName, eventObj) {
                throw new Error('Not yet implemented in ng-forward.');
            }
        },
        inject: {
            value: function (type) {
                throw new Error('Not yet implemented in ng-forward.');
            }
        },
        hasDirective: {
            value: function (type) {
                throw new Error('Not yet implemented in ng-forward.');
            }
        }
    });
})(angular.element.prototype);
export default angular.element;

//# sourceMappingURL=data:application/json;base64,
