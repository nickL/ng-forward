import parseSelector from '../util/parse-selector';
import { providerStore, componentStore, bundleStore } from '../writers';
import { Providers } from './providers';
import Module from '../classes/module';
import directiveControllerFactory from '../util/directive-controller';
import { createConfigErrorMessage } from '../util/helpers';
const TYPE = 'directive';
export function Directive({ selector, providers = [] }) {
    return function (t) {
        if (!selector) {
            throw new Error('Directive selector must be provided');
        }
        let { name, type: restrict } = parseSelector(selector);
        if (providers !== undefined && !Array.isArray(providers)) {
            throw new TypeError(`Directive providers must be an array`);
        }
        providerStore.set('name', name, t);
        providerStore.set('type', TYPE, t);
        bundleStore.set('selector', selector, t);
        Providers(...providers)(t, `while analyzing Directive '${t.name}' providers`);
        componentStore.set('restrict', restrict, t);
    };
}
Module.addProvider(TYPE, (target, name, injects, ngModule) => {
    let ddo = {};
    componentStore.forEach((val, key) => ddo[key] = val, target);
    if (ddo.restrict !== 'A') {
        throw new Error(createConfigErrorMessage(target, ngModule, `@Directive selectors can only be attributes, e.g. selector: '[my-directive]'`));
    }
    ngModule.directive(name, ['$injector', ($injector) => {
            ddo.link = function ($scope, $element, $attrs, $requires, $transclude) {
                let locals = { $scope, $element, $attrs, $transclude, $requires };
                return directiveControllerFactory(this, injects, target, ddo, $injector, locals);
            };
            return ddo;
        }]);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZWNvcmF0b3JzL2RpcmVjdGl2ZS50cyJdLCJuYW1lcyI6WyJEaXJlY3RpdmUiXSwibWFwcGluZ3MiOiJPQVFPLGFBQWEsTUFBTSx3QkFBd0I7T0FHM0MsRUFBQyxhQUFhLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBQyxNQUFNLFlBQVk7T0FHOUQsRUFBQyxTQUFTLEVBQUMsTUFBTSxhQUFhO09BRTlCLE1BQU0sTUFBTSxtQkFBbUI7T0FDL0IsMEJBQTBCLE1BQU0sOEJBQThCO09BRTlELEVBQUMsd0JBQXdCLEVBQUMsTUFBTSxpQkFBaUI7QUFLeEQsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDO0FBR3pCLDBCQUNFLEVBQ0MsUUFBUSxFQUNSLFNBQVMsR0FBRyxFQUFFLEVBS2Q7SUFFRkEsTUFBTUEsQ0FBQ0EsVUFBU0EsQ0FBTUE7UUFFckIsRUFBRSxDQUFBLENBQUUsQ0FBQyxRQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztRQUN4RCxDQUFDO1FBR0QsSUFBSSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFDLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXJELEVBQUUsQ0FBQSxDQUFDLFNBQVMsS0FBSyxTQUFTLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUEsQ0FBQztZQUN4RCxNQUFNLElBQUksU0FBUyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7UUFDN0QsQ0FBQztRQUdELGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuQyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbkMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBSXpDLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLENBQUM7UUFHOUUsY0FBYyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQUE7QUFDRkEsQ0FBQ0E7QUFHRCxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQVcsRUFBRSxJQUFZLEVBQUUsT0FBaUIsRUFBRSxRQUFvQjtJQUUzRixJQUFJLEdBQUcsR0FBUSxFQUFFLENBQUM7SUFHbEIsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUk3RCxFQUFFLENBQUEsQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUN2RCw4RUFBOEUsQ0FBQyxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUdELFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBbUM7WUFHMUUsR0FBRyxDQUFDLElBQUksR0FBRyxVQUFTLE1BQVcsRUFBRSxRQUFhLEVBQUUsTUFBVyxFQUFFLFNBQWMsRUFBRSxXQUFnQjtnQkFDNUYsSUFBSSxNQUFNLEdBQUcsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLENBQUM7Z0JBQ2xFLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2xGLENBQUMsQ0FBQztZQUVGLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoibGliL2RlY29yYXRvcnMvZGlyZWN0aXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gIyBEaXJlY3RpdmUgRGVjb3JhdG9yXG4vL1xuLy8gIyMgVXNhZ2Vcbi8vXG4vLyAjIyBTZXR1cFxuLy8gYHBhcnNlU2VsZWN0b3JgIHRha2VzIHNvbWUgc2ltcGxlIENTUyBzZWxlY3RvciBhbmQgcmV0dXJucyBhIGNhbWVsQ2FzZWQgdmVyc2lvblxuLy8gb2YgdGhlIHNlbGVjdG9yIGFzIHdlbGwgYXMgdGhlIHR5cGUgb2Ygc2VsZWN0b3IgaXQgd2FzIChlbGVtZW50LCBhdHRyaWJ1dGUsIG9yXG4vLyBDU1MgY2xhc3MpLlxuaW1wb3J0IHBhcnNlU2VsZWN0b3IgZnJvbSAnLi4vdXRpbC9wYXJzZS1zZWxlY3Rvcic7XG4vLyBgcHJvdmlkZXJTdG9yZWAgc2V0cyB1cCBwcm92aWRlciBpbmZvcm1hdGlvbiwgYGNvbXBvbmVudFN0b3JlYCB3cml0ZXMgdGhlIERETyxcbi8vIGFuZCBgYXBwV3JpdGVyYCBzZXRzIHVwIGFwcCB0cmF2ZXJzYWwvYm9vdHN0cmFwcGluZyBpbmZvcm1hdGlvbi5cbmltcG9ydCB7cHJvdmlkZXJTdG9yZSwgY29tcG9uZW50U3RvcmUsIGJ1bmRsZVN0b3JlfSBmcm9tICcuLi93cml0ZXJzJztcbi8vIFRha2VzIHRoZSBpbmZvcm1hdGlvbiBmcm9tIGBjb25maWcucHJvdmlkZXJzYCBhbmQgdHVybnMgaXQgaW50byB0aGUgYWN0dWFsIG1ldGFkYXRhXG4vLyBuZWVkZWQgZHVyaW5nIGFwcCB0cmF2ZXJzYWxcbmltcG9ydCB7UHJvdmlkZXJzfSBmcm9tICcuL3Byb3ZpZGVycyc7XG4vLyBQcm92aWRlciBwYXJzZXIgd2lsbCBuZWVkIHRvIGJlIHJlZ2lzdGVyZWQgd2l0aCBNb2R1bGVcbmltcG9ydCBNb2R1bGUgZnJvbSAnLi4vY2xhc3Nlcy9tb2R1bGUnO1xuaW1wb3J0IGRpcmVjdGl2ZUNvbnRyb2xsZXJGYWN0b3J5IGZyb20gJy4uL3V0aWwvZGlyZWN0aXZlLWNvbnRyb2xsZXInO1xuaW1wb3J0IHtpbnB1dHNNYXB9IGZyb20gJy4uL3Byb3BlcnRpZXMvaW5wdXRzLWJ1aWxkZXInO1xuaW1wb3J0IHtjcmVhdGVDb25maWdFcnJvck1lc3NhZ2V9IGZyb20gJy4uL3V0aWwvaGVscGVycyc7XG5cbi8vIFRoZSB0eXBlIGZvciByaWdodCBub3cgaXMgYGRpcmVjdGl2ZWAuIEluIGFuZ3VsYXItZGVjb3JhdG9ycyB0aGVyZSB3YXMgdmVyeSBsaXR0bGVcbi8vIGRpZmZlcmVuY2UgYmV0d2VlbiBgQENvbXBvbmVudGAgYW5kIGBARGlyZWN0aXZlYCBzbyB0aGV5IHNoYXJlZCBhIGNvbW1vbiBwcm92aWRlclxuLy8gcGFyc2VyIGRlZmluZWQgaW4gYC4uLy4uL3V0aWwvZGVjb3JhdGUtZGlyZWN0aXZlLmpzYFxuY29uc3QgVFlQRSA9ICdkaXJlY3RpdmUnO1xuXG4vLyAjIyBEZWNvcmF0b3IgRGVmaW5pdGlvblxuZXhwb3J0IGZ1bmN0aW9uIERpcmVjdGl2ZShcblx0XHR7XG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdHByb3ZpZGVycyA9IFtdXG5cdFx0fSA6XG5cdFx0e1xuXHRcdFx0c2VsZWN0b3I6IHN0cmluZyxcblx0XHRcdHByb3ZpZGVycz86IGFueVtdXG5cdFx0fVxuXHQpe1xuXHRyZXR1cm4gZnVuY3Rpb24odDogYW55KXtcblx0XHQvLyBUaGUgb25seSByZXF1aXJlZCBjb25maWcgaXMgYSBzZWxlY3Rvci4gSWYgb25lIHdhc24ndCBwYXNzZWQsIHRocm93IGltbWVkaWF0ZWx5XG5cdFx0aWYoICFzZWxlY3RvciApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRGlyZWN0aXZlIHNlbGVjdG9yIG11c3QgYmUgcHJvdmlkZWQnKTtcblx0XHR9XG5cdFxuXHRcdC8vIEdyYWIgdGhlIHByb3ZpZGVyIG5hbWUgYW5kIHNlbGVjdG9yIHR5cGUgYnkgcGFyc2luZyB0aGUgc2VsZWN0b3Jcblx0XHRsZXQge25hbWUsIHR5cGU6IHJlc3RyaWN0fSA9IHBhcnNlU2VsZWN0b3Ioc2VsZWN0b3IpO1xuXHRcblx0XHRpZihwcm92aWRlcnMgIT09IHVuZGVmaW5lZCAmJiAhQXJyYXkuaXNBcnJheShwcm92aWRlcnMpKXtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYERpcmVjdGl2ZSBwcm92aWRlcnMgbXVzdCBiZSBhbiBhcnJheWApO1xuXHRcdH1cblx0XG5cdFx0Ly8gU2V0dXAgcHJvdmlkZXIgaW5mb3JtYXRpb24gdXNpbmcgdGhlIHBhcnNlZCBzZWxlY3RvclxuXHRcdHByb3ZpZGVyU3RvcmUuc2V0KCduYW1lJywgbmFtZSwgdCk7XG5cdFx0cHJvdmlkZXJTdG9yZS5zZXQoJ3R5cGUnLCBUWVBFLCB0KTtcblx0XHRidW5kbGVTdG9yZS5zZXQoJ3NlbGVjdG9yJywgc2VsZWN0b3IsIHQpO1xuXHRcblx0XHQvLyBHcmFiIHRoZSBwcm92aWRlcnMgZnJvbSB0aGUgY29uZmlnIG9iamVjdCwgcGFyc2UgdGhlbSwgYW5kIHdyaXRlIHRoZSBtZXRhZGF0YVxuXHRcdC8vIHRvIHRoZSB0YXJnZXQuXG5cdFx0UHJvdmlkZXJzKC4uLnByb3ZpZGVycykodCwgYHdoaWxlIGFuYWx5emluZyBEaXJlY3RpdmUgJyR7dC5uYW1lfScgcHJvdmlkZXJzYCk7XG5cdFxuXHRcdC8vIFJlc3RyaWN0IHR5cGUgbXVzdCBiZSAnZWxlbWVudCdcblx0XHRjb21wb25lbnRTdG9yZS5zZXQoJ3Jlc3RyaWN0JywgcmVzdHJpY3QsIHQpO1xuXHR9XG59XG5cbi8vICMjIENvbXBvbmVudCBQcm92aWRlciBQYXJzZXJcbk1vZHVsZS5hZGRQcm92aWRlcihUWVBFLCAodGFyZ2V0OiBhbnksIG5hbWU6IHN0cmluZywgaW5qZWN0czogc3RyaW5nW10sIG5nTW9kdWxlOiBuZy5JTW9kdWxlKSA9PiB7XG5cdC8vIEZpcnN0IGNyZWF0ZSBhbiBlbXB0eSBvYmplY3QgdG8gY29udGFpbiB0aGUgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0XG5cdGxldCBkZG86IGFueSA9IHt9O1xuXG5cdC8vIExvb3AgdGhyb3VnaCB0aGUga2V5L3ZhbCBwYWlycyBvZiBtZXRhZGF0YSBhbmQgYXNzaWduIGl0IHRvIHRoZSBERE9cblx0Y29tcG9uZW50U3RvcmUuZm9yRWFjaCgodmFsLCBrZXkpID0+IGRkb1trZXldID0gdmFsLCB0YXJnZXQpO1xuXG5cdC8vIElmIHRoZSBzZWxlY3RvciB0eXBlIHdhcyBub3QgYW4gZWxlbWVudCwgdGhyb3cgYW4gZXJyb3IuIENvbXBvbmVudHMgY2FuIG9ubHlcblx0Ly8gYmUgZWxlbWVudHMgaW4gQW5ndWxhciAyLCBzbyB3ZSB3YW50IHRvIGVuZm9yY2UgdGhhdCBzdHJpY3RseSBoZXJlLlxuXHRpZihkZG8ucmVzdHJpY3QgIT09ICdBJykge1xuXHRcdHRocm93IG5ldyBFcnJvcihjcmVhdGVDb25maWdFcnJvck1lc3NhZ2UodGFyZ2V0LCBuZ01vZHVsZSxcblx0XHRcdFx0YEBEaXJlY3RpdmUgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIGF0dHJpYnV0ZXMsIGUuZy4gc2VsZWN0b3I6ICdbbXktZGlyZWN0aXZlXSdgKSk7XG5cdH1cblxuXHQvLyBGaW5hbGx5IGFkZCB0aGUgZGlyZWN0aXZlIHRvIHRoZSByYXcgbW9kdWxlXG5cdG5nTW9kdWxlLmRpcmVjdGl2ZShuYW1lLCBbJyRpbmplY3RvcicsICgkaW5qZWN0b3I6IG5nLmF1dG8uSUluamVjdG9yU2VydmljZSkgPT4ge1xuXHRcdC8vIENvbXBvbmVudCBjb250cm9sbGVycyBtdXN0IGJlIGNyZWF0ZWQgZnJvbSBhIGZhY3RvcnkuIENoZWNrb3V0IG91dFxuXHRcdC8vIHV0aWwvZGlyZWN0aXZlLWNvbnRyb2xsZXIuanMgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCdzIGdvaW5nIG9uIGhlcmVcblx0XHRkZG8ubGluayA9IGZ1bmN0aW9uKCRzY29wZTogYW55LCAkZWxlbWVudDogYW55LCAkYXR0cnM6IGFueSwgJHJlcXVpcmVzOiBhbnksICR0cmFuc2NsdWRlOiBhbnkpe1xuXHRcdFx0bGV0IGxvY2FscyA9IHsgJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkdHJhbnNjbHVkZSwgJHJlcXVpcmVzIH07XG5cdFx0XHRyZXR1cm4gZGlyZWN0aXZlQ29udHJvbGxlckZhY3RvcnkodGhpcywgaW5qZWN0cywgdGFyZ2V0LCBkZG8sICRpbmplY3RvciwgbG9jYWxzKTtcblx0XHR9O1xuXG5cdFx0cmV0dXJuIGRkbztcblx0fV0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
